# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import PrepoData, tablemodel
from PyQt5.QtWidgets import *
import pandas as pd
import numpy as np
import sys,pickle
from sklearn import preprocessing
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn import metrics
from sklearn.ensemble import AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
import sys
from collections import Counter
from imblearn.over_sampling import SMOTE
import PIL.Image
import pydotplus
from IPython.display import display, Image
from sklearn.tree import export_graphviz
from glob2 import glob

class Ui_MainWindow(QtWidgets.QMainWindow):
    global data 
    data=PrepoData.data_()
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1242, 953)
        MainWindow.setStyleSheet("background-image: url(:/bg/backgroud.jpg);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(440, 50, 660, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(270, 0, 231, 221))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("./logo.png"))
        self.label_2.setObjectName("label_2")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(40, 220, 1161, 711))
        self.tabWidget.setStyleSheet("background-image: url(:/bg/backgroud.jpg);")
        self.tabWidget.setObjectName("tabWidget")
        self.dm_tab = QtWidgets.QWidget()
        self.dm_tab.setObjectName("dm_tab")
        self.layoutWidget_4 = QtWidgets.QWidget(self.dm_tab)
        self.layoutWidget_4.setGeometry(QtCore.QRect(0, 350, 301, 151))
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget_4)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_9 = QtWidgets.QLabel(self.layoutWidget_4)
        self.label_9.setObjectName("label_9")
        self.verticalLayout_2.addWidget(self.label_9)
        self.label_11 = QtWidgets.QLabel(self.layoutWidget_4)
        self.label_11.setObjectName("label_11")
        self.verticalLayout_2.addWidget(self.label_11)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.kfold_line = QtWidgets.QLineEdit(self.layoutWidget_4)
        self.kfold_line.setObjectName("kfold_line")
        self.verticalLayout_5.addWidget(self.kfold_line)
        self.jumlahpohon_line = QtWidgets.QLineEdit(self.layoutWidget_4)
        self.jumlahpohon_line.setObjectName("jumlahpohon_line")
        self.verticalLayout_5.addWidget(self.jumlahpohon_line)
        self.horizontalLayout_2.addLayout(self.verticalLayout_5)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.proses_btn = QtWidgets.QPushButton(self.layoutWidget_4)
        self.proses_btn.setObjectName("proses_btn")
        self.verticalLayout_3.addWidget(self.proses_btn)
        self.label_7 = QtWidgets.QLabel(self.dm_tab)
        self.label_7.setGeometry(QtCore.QRect(620, 240, 68, 19))
        self.label_7.setObjectName("label_7")
        self.label_10 = QtWidgets.QLabel(self.dm_tab)
        self.label_10.setGeometry(QtCore.QRect(700, 550, 121, 21))
        self.label_10.setText("")
        self.label_10.setObjectName("label_10")
        self.label_8 = QtWidgets.QLabel(self.dm_tab)
        self.label_8.setGeometry(QtCore.QRect(620, 550, 68, 19))
        self.label_8.setObjectName("label_8")
        self.simpanmodelada_btn = QtWidgets.QPushButton(self.dm_tab)
        self.simpanmodelada_btn.setGeometry(QtCore.QRect(620, 580, 131, 34))
        self.simpanmodelada_btn.setObjectName("simpanmodelada_btn")
        self.layoutWidget_2 = QtWidgets.QWidget(self.dm_tab)
        self.layoutWidget_2.setGeometry(QtCore.QRect(0, 10, 521, 331))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget_2)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.layoutWidget_2)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.inputdata_btn = QtWidgets.QPushButton(self.layoutWidget_2)
        self.inputdata_btn.setObjectName("inputdata_btn")
        self.verticalLayout_4.addWidget(self.inputdata_btn)
        self.pathdata_line = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.pathdata_line.setObjectName("pathdata_line")
        self.verticalLayout_4.addWidget(self.pathdata_line)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabeldata_table = QtWidgets.QTableView(self.layoutWidget_2)
        self.tabeldata_table.setObjectName("tabeldata_table")
        self.verticalLayout.addWidget(self.tabeldata_table)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.verticalLayout_4.addLayout(self.verticalLayout)
        self.simpanmodelrf_btn = QtWidgets.QPushButton(self.dm_tab)
        self.simpanmodelrf_btn.setGeometry(QtCore.QRect(620, 270, 131, 34))
        self.simpanmodelrf_btn.setObjectName("simpanmodelrf_btn")
        self.akurasirf_label = QtWidgets.QLabel(self.dm_tab)
        self.akurasirf_label.setGeometry(QtCore.QRect(700, 240, 121, 21))
        self.akurasirf_label.setText("")
        self.akurasirf_label.setObjectName("akurasirf_label")
        self.label_6 = QtWidgets.QLabel(self.dm_tab)
        self.label_6.setGeometry(QtCore.QRect(620, 320, 101, 19))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.label_5 = QtWidgets.QLabel(self.dm_tab)
        self.label_5.setGeometry(QtCore.QRect(620, 10, 151, 19))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.cmrf_plain = QtWidgets.QPlainTextEdit(self.dm_tab)
        self.cmrf_plain.setGeometry(QtCore.QRect(620, 40, 361, 191))
        self.cmrf_plain.setObjectName("cmrf_plain")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.dm_tab)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(620, 350, 361, 191))
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.tabWidget.addTab(self.dm_tab, "")
        self.uji_tab = QtWidgets.QWidget()
        self.uji_tab.setObjectName("uji_tab")
        self.prediksi_btn = QtWidgets.QPushButton(self.uji_tab)
        self.prediksi_btn.setGeometry(QtCore.QRect(720, 180, 112, 34))
        self.prediksi_btn.setObjectName("prediksi_btn")
        self.hasilprediksilabel = QtWidgets.QLabel(self.uji_tab)
        self.hasilprediksilabel.setGeometry(QtCore.QRect(730, 260, 111, 81))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.hasilprediksilabel.setFont(font)
        self.hasilprediksilabel.setText("")
        self.hasilprediksilabel.setAlignment(QtCore.Qt.AlignCenter)
        self.hasilprediksilabel.setObjectName("hasilprediksilabel")
        self.layoutWidget_3 = QtWidgets.QWidget(self.uji_tab)
        self.layoutWidget_3.setGeometry(QtCore.QRect(0, 90, 537, 231))
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.layoutWidget_3)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.label_69 = QtWidgets.QLabel(self.layoutWidget_3)
        self.label_69.setObjectName("label_69")
        self.verticalLayout_17.addWidget(self.label_69)
        self.label_70 = QtWidgets.QLabel(self.layoutWidget_3)
        self.label_70.setObjectName("label_70")
        self.verticalLayout_17.addWidget(self.label_70)
        self.label_71 = QtWidgets.QLabel(self.layoutWidget_3)
        self.label_71.setObjectName("label_71")
        self.verticalLayout_17.addWidget(self.label_71)
        self.label_72 = QtWidgets.QLabel(self.layoutWidget_3)
        self.label_72.setObjectName("label_72")
        self.verticalLayout_17.addWidget(self.label_72)
        self.label_82 = QtWidgets.QLabel(self.layoutWidget_3)
        self.label_82.setObjectName("label_82")
        self.verticalLayout_17.addWidget(self.label_82)
        self.horizontalLayout_8.addLayout(self.verticalLayout_17)
        self.verticalLayout_18 = QtWidgets.QVBoxLayout()
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.jk_combo = QtWidgets.QComboBox(self.layoutWidget_3)
        self.jk_combo.setObjectName("jk_combo")
        self.jk_combo.addItem("")
        self.jk_combo.addItem("")
        self.verticalLayout_18.addWidget(self.jk_combo)
        self.ps_combo = QtWidgets.QComboBox(self.layoutWidget_3)
        self.ps_combo.setObjectName("ps_combo")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.ps_combo.addItem("")
        self.verticalLayout_18.addWidget(self.ps_combo)
        self.sem_combo = QtWidgets.QComboBox(self.layoutWidget_3)
        self.sem_combo.setObjectName("sem_combo")
        self.sem_combo.addItem("")
        self.sem_combo.addItem("")
        self.sem_combo.addItem("")
        self.sem_combo.addItem("")
        self.sem_combo.addItem("")
        self.sem_combo.addItem("")
        self.verticalLayout_18.addWidget(self.sem_combo)
        self.lokasi_combo = QtWidgets.QComboBox(self.layoutWidget_3)
        self.lokasi_combo.setObjectName("lokasi_combo")
        self.lokasi_combo.addItem("")
        self.lokasi_combo.addItem("")
        self.lokasi_combo.addItem("")
        self.verticalLayout_18.addWidget(self.lokasi_combo)
        self.j11_combo = QtWidgets.QComboBox(self.layoutWidget_3)
        self.j11_combo.setObjectName("j11_combo")
        self.j11_combo.addItem("")
        self.j11_combo.addItem("")
        self.j11_combo.addItem("")
        self.j11_combo.addItem("")
        self.verticalLayout_18.addWidget(self.j11_combo)
        self.horizontalLayout_8.addLayout(self.verticalLayout_18)
        self.layoutWidget = QtWidgets.QWidget(self.uji_tab)
        self.layoutWidget.setGeometry(QtCore.QRect(700, 90, 131, 71))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.label_22 = QtWidgets.QLabel(self.layoutWidget)
        self.label_22.setObjectName("label_22")
        self.verticalLayout_15.addWidget(self.label_22)
        self.label_59 = QtWidgets.QLabel(self.layoutWidget)
        self.label_59.setObjectName("label_59")
        self.verticalLayout_15.addWidget(self.label_59)
        self.horizontalLayout_7.addLayout(self.verticalLayout_15)
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.j28a_combo = QtWidgets.QComboBox(self.layoutWidget)
        self.j28a_combo.setObjectName("j28a_combo")
        self.j28a_combo.addItem("")
        self.j28a_combo.addItem("")
        self.verticalLayout_16.addWidget(self.j28a_combo)
        self.j28c_combo = QtWidgets.QComboBox(self.layoutWidget)
        self.j28c_combo.setObjectName("j28c_combo")
        self.j28c_combo.addItem("")
        self.j28c_combo.addItem("")
        self.verticalLayout_16.addWidget(self.j28c_combo)
        self.horizontalLayout_7.addLayout(self.verticalLayout_16)
        self.layoutWidget_5 = QtWidgets.QWidget(self.uji_tab)
        self.layoutWidget_5.setGeometry(QtCore.QRect(550, 90, 131, 101))
        self.layoutWidget_5.setObjectName("layoutWidget_5")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.layoutWidget_5)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout()
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.label_89 = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_89.setObjectName("label_89")
        self.verticalLayout_19.addWidget(self.label_89)
        self.label_91 = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_91.setObjectName("label_91")
        self.verticalLayout_19.addWidget(self.label_91)
        self.label_93 = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_93.setObjectName("label_93")
        self.verticalLayout_19.addWidget(self.label_93)
        self.horizontalLayout_9.addLayout(self.verticalLayout_19)
        self.verticalLayout_20 = QtWidgets.QVBoxLayout()
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.j21_combo = QtWidgets.QComboBox(self.layoutWidget_5)
        self.j21_combo.setObjectName("j21_combo")
        self.j21_combo.addItem("")
        self.j21_combo.addItem("")
        self.j21_combo.addItem("")
        self.j21_combo.addItem("")
        self.verticalLayout_20.addWidget(self.j21_combo)
        self.j23_combo = QtWidgets.QComboBox(self.layoutWidget_5)
        self.j23_combo.setObjectName("j23_combo")
        self.j23_combo.addItem("")
        self.j23_combo.addItem("")
        self.j23_combo.addItem("")
        self.j23_combo.addItem("")
        self.verticalLayout_20.addWidget(self.j23_combo)
        self.j25_combo = QtWidgets.QComboBox(self.layoutWidget_5)
        self.j25_combo.setObjectName("j25_combo")
        self.j25_combo.addItem("")
        self.j25_combo.addItem("")
        self.j25_combo.addItem("")
        self.j25_combo.addItem("")
        self.verticalLayout_20.addWidget(self.j25_combo)
        self.horizontalLayout_9.addLayout(self.verticalLayout_20)
        self.label_68 = QtWidgets.QLabel(self.uji_tab)
        self.label_68.setGeometry(QtCore.QRect(700, 230, 181, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_68.setFont(font)
        self.label_68.setObjectName("label_68")
        self.layoutWidget_6 = QtWidgets.QWidget(self.uji_tab)
        self.layoutWidget_6.setGeometry(QtCore.QRect(0, 10, 1071, 70))
        self.layoutWidget_6.setObjectName("layoutWidget_6")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.layoutWidget_6)
        self.verticalLayout_21.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.inputmodel_btn = QtWidgets.QPushButton(self.layoutWidget_6)
        self.inputmodel_btn.setObjectName("inputmodel_btn")
        self.verticalLayout_21.addWidget(self.inputmodel_btn)
        self.path_line = QtWidgets.QLineEdit(self.layoutWidget_6)
        self.path_line.setObjectName("path_line")
        self.verticalLayout_21.addWidget(self.path_line)
        self.label_96 = QtWidgets.QLabel(self.uji_tab)
        self.label_96.setGeometry(QtCore.QRect(10, 350, 131, 19))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_96.setFont(font)
        self.label_96.setObjectName("label_96")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.uji_tab)
        self.plainTextEdit.setGeometry(QtCore.QRect(10, 380, 321, 151))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.label_105 = QtWidgets.QLabel(self.uji_tab)
        self.label_105.setGeometry(QtCore.QRect(370, 410, 131, 19))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_105.setFont(font)
        self.label_105.setObjectName("label_105")
        self.plainTextEdit_3 = QtWidgets.QPlainTextEdit(self.uji_tab)
        self.plainTextEdit_3.setGeometry(QtCore.QRect(370, 430, 201, 101))
        self.plainTextEdit_3.setObjectName("plainTextEdit_3")
        self.tabWidget.addTab(self.uji_tab, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.inputdata_btn.clicked.connect(self.getExcel)
        self.proses_btn.clicked.connect(self.prepo)
        self.simpanmodelrf_btn.clicked.connect(self.download_modelrf)
        self.simpanmodelada_btn.clicked.connect(self.download_modelada)
        self.inputmodel_btn.clicked.connect(self.getModel)
        self.prediksi_btn.clicked.connect(self.proses_prediksi)

    def getExcel(self):
        self.filePath, _ = QtWidgets.QFileDialog.getOpenFileName(self, 'Open file', QtCore.QDir.homePath(),"Excel files(*.xls)")
        self.pathdata_line.setText(self.filePath)
        self.fileName = self.pathdata_line.text()
        if(self.filePath!=""):
                self.detail_data(0)

    def detail_data(self,flag=1):
         
        if(flag==0):  
            
                self.df = data.read_file(str(self.filePath))
        
        self.column_list=data.get_column_list(self.df)
        self.isi_tabel() 
        shape_df="Info Data:  Baris:"+ str(data.get_shape(self.df)[0])+"  Kolom: "+str(data.get_shape(self.df)[1])
        self.label_4.setText(shape_df)

    def isi_tabel(self):

        x=tablemodel.DataFrameModel(self.df)
        self.tabeldata_table.setModel(x)

    def prepo(self):
        self.df = data.read_file(str(self.filePath))
        ##hapus missing value
        print(self.df.isnull().sum())
        self.df.dropna(inplace=True)
        print(self.df.shape)
        print(self.df.isnull().sum())

        #semua atribut
        # self.df.drop(self.df.columns[[0,1,2,4,6,55]], axis=1, inplace=True)

        #weka treshold
        # self.df.drop(self.df.columns[[0,1,2,4,6,9,10,12,13,15,18,21,22,23,24,27,28,30,34,55]], axis=1, inplace=True)
        #uji coba weka reduksi
        #self.df.drop(self.df.columns[[0,1,2,4,6,55, 24,28,18,27,21,22,15,23,30,12,9,13,10,34,46,45,49,43,52,53,54,
        #40,44,42,39,41,48,26,20,11,25,51,50,17,32,14,16,35,37,47,29,31,19,33,8,36,3,38,7]], axis=1, inplace=True)
        
        #uji coba weka reduksi
        self.df.drop(self.df.columns[[0,1,2,4,6,55, 24,28,18,27,21,22,15,23,30,12,9,13,10,34,46,
        45,49,43,52,53,54,40,44,42,39,41,48,26,20,11,25,51,50,17,32,14,16,35,37,47]], axis=1, inplace=True)
        
        print(self.df)

        ##transformasi data
        label_encoder = preprocessing.LabelEncoder()
        self.df['Program Studi']= label_encoder.fit_transform(self.df['Program Studi'])
        self.df['Program Studi'].unique()
        
        self.df["Jenis Kelamin"]=self.df["Jenis Kelamin"].map({"Laki-laki":1, "Perempuan":2})
        self.df["j28a"]=self.df["j28a"].map({"N":1, "Y":2})
        self.df["j28c"]=self.df["j28c"].map({"N":1, "Y":2})

        self.batas_bin = [-1, 2.25, 2.75, 3.50, 4]
        self.kategori = ['D','C','B','A']
        self.df['IPS']= pd.cut(self.df['IPS'], bins=self.batas_bin, labels=self.kategori)

        # self.batas_bin = [-1, 1, 2, 3, 4]
        # self.kategori = ['D','C','B','A']
        # self.df['IPS']= pd.cut(self.df['IPS'], bins=self.batas_bin, labels=self.kategori)

        self.df.dropna(inplace=True)
        print(self.df)

        ##Menyimpan atribut tanpa label dari dataset kedalam variabel x
        self.X = self.df.iloc[:, 0:10].values
        ##Menyimpan atribut yang hanya berisi label dari dataset kedalam variabel y
        self.Y = self.df.iloc[:,10].values

        print(self.df['IPS'].value_counts())

        self.scaler = MinMaxScaler(feature_range=(0,1))
        self.X=self.scaler.fit_transform(self.X)

        self.proses_rf()
        self.proses_adaboost()

    def proses_rf(self):
        akurasi_model=[]
        cm=[]
        feature_names = self.df.columns[:-1]
        cn=['A', 'B', 'C', 'D']
        class_names = cn
        tanda = 1
        sum_precision = 0
        sum_recall=0
        sum_f1=0
        cv = KFold(n_splits=int(self.kfold_line.text()), random_state=42,shuffle=True)
        for train_index, test_index in cv.split(self.X):
            X_train, X_test, y_train, y_test = self.X[train_index], self.X[test_index], self.Y[train_index], self.Y[test_index]
            lr=RandomForestClassifier(n_estimators=int(self.jumlahpohon_line.text()), 
            max_features='sqrt',criterion='entropy',bootstrap='True', random_state=42)
            self.rf_pipeline = make_pipeline(lr)
            print(self.rf_pipeline)
            model=self.rf_pipeline.fit(X_train, y_train)
            # pohon 
            # for i in range(len(lr.estimators_)):
            #     self.simpanpohon_rf(lr.estimators_[i], i, feature_names, class_names, tanda)
            prediksi=model.predict(X_test)
            confusion=metrics.confusion_matrix(y_test,prediksi)
            print(confusion)
            akurasi_matrix=self.akurasi(confusion)
            print(akurasi_matrix)
            akurasi_model.append(akurasi_matrix)
            cm.append(confusion)
            # tanda=tanda+1

            # precision = precision_score(y_test,prediksi,average="macro",zero_division=1)
            # recall = recall_score(y_test,prediksi,average="macro")
            # f1 = f1_score(y_test,prediksi,average="macro",zero_division=1)
            # sum_precision += precision
            # sum_recall += recall
            # sum_f1 += f1

        self.cmrf_plain.setPlainText(str(cm))
        akurasi= np.mean(akurasi_model)*100
        persen=round(akurasi,2)
        persenStr=str(persen)
        self.akurasirf_label.setText(persenStr+ '%')

    def proses_adaboost(self):
        akurasi_model=[]
        cm=[]
        feature_names = self.df.columns[:-1]
        cn=['A', 'B', 'C', 'D']
        class_names = cn
        tanda = 1
        sum_precision = 0
        sum_recall=0
        sum_f1=0
        cv = KFold(n_splits=int(self.kfold_line.text()), random_state=42,shuffle=True)
        for train_index, test_index in cv.split(self.X):
            X_train, X_test, y_train, y_test = self.X[train_index], self.X[test_index], self.Y[train_index], self.Y[test_index]
            ada=AdaBoostClassifier(DecisionTreeClassifier(criterion='entropy',max_depth=1),
            algorithm="SAMME", 
            n_estimators=int(self.jumlahpohon_line.text()), learning_rate=1,random_state=42)
            self.ada_pipeline = make_pipeline(ada)
            print(self.ada_pipeline)
            model=self.ada_pipeline.fit(X_train, y_train)
            # pohon 
            # for i in range(len(ada.estimators_)):
            #     self.simpanpohon_adaboost(ada.estimators_[i], i, feature_names, class_names, tanda)
            prediksi=model.predict(X_test)
            confusion=metrics.confusion_matrix(y_test,prediksi)
            print(confusion)
            akurasi_matrix=self.akurasi(confusion)
            print(akurasi_matrix)
            akurasi_model.append(akurasi_matrix)
            cm.append(confusion)
            # tanda=tanda+1

            # precision = precision_score(y_test,prediksi,average="macro",zero_division=1)
            # recall = recall_score(y_test,prediksi,average="macro")
            # f1 = f1_score(y_test,prediksi,average="macro",zero_division=1)
            # sum_precision += precision
            # sum_recall += recall
            # sum_f1 += f1

        self.plainTextEdit_2.setPlainText(str(cm))
        akurasi= np.mean(akurasi_model)*100
        persen=round(akurasi,2)
        persenStr=str(persen)
        self.label_10.setText(persenStr + '%')

    def simpanpohon_rf(self, clf, iteration, feature_name, target_name, tanda):
        file_name = "RF" +" "+ "iterasi" +" "+ str(iteration) +" "+ "kfold" +" "+ str(tanda) + ".png"
        dot_data = export_graphviz(
            clf,
            out_file=None,
            feature_names=feature_name,
            class_names=target_name,
            rounded=True,
            proportion=False,
            precision=2,
            filled=True,
        )
        graph = pydotplus.graph_from_dot_data(dot_data)
        graph.write_png(file_name)
        print("Decision Tree {} saved as png file".format(iteration + 1))

    def simpanpohon_adaboost(self, clf, iteration, feature_name, target_name, tanda):
        file_name = "adaboost" + str(iteration) + str(tanda) + ".png"
        dot_data = export_graphviz(
            clf,
            out_file=None,
            feature_names=feature_name,
            class_names=target_name,
            rounded=True,
            proportion=False,
            precision=2,
            filled=True,
        )
        graph = pydotplus.graph_from_dot_data(dot_data)
        graph.write_png(file_name)
        print("Decision Tree {} saved as png file".format(iteration + 1))

    def akurasi(self,confusion_matrix):
        jumlah_data = 0
        jumlah_benar = 0
        panjang_matrix = len(confusion_matrix)
        for i in range(panjang_matrix):
            for j in range(panjang_matrix):
                jumlah_data += confusion_matrix[i][j]
                if i == j:
                   jumlah_benar += confusion_matrix[i][j]
            # endif
        # endfor
    # endfor

        return jumlah_benar / jumlah_data

    def download_modelrf(self):

        nama = QtWidgets.QFileDialog.getSaveFileName(self, 'Save File',QtCore.QDir.homePath(),"pickle(*.pkl)")
        
        pkl_namafile = nama[0]
        with open(pkl_namafile, 'wb') as file:
            pickle.dump(self.rf_pipeline, file) 
    
    def download_modelada(self):

        nama = QtWidgets.QFileDialog.getSaveFileName(self, 'Save File',QtCore.QDir.homePath(),"pickle(*.pkl)")
        
        pkl_namafile = nama[0]
        with open(pkl_namafile, 'wb') as file:
            pickle.dump(self.ada_pipeline, file)
  
    def getModel(self):
        self.filePath_model, _ = QtWidgets.QFileDialog.getOpenFileName(self, 'Open file', QtCore.QDir.homePath(),"pkl(*.pkl)")
        self.path_line.setText(self.filePath_model)
        self.fileName = self.path_line.text()
        with open(self.filePath_model, 'rb') as file:
            self.pickle_model = pickle.load(file)
        print(self.pickle_model)

    def proses_prediksi(self):
        if(self.jk_combo.currentText()=='Laki-laki'):
            self.jk_combo.currentText=1
        elif(self.jk_combo.currentText()=='Perempuan'):
            self.jk_combo.currentText=2
        print(self.jk_combo.currentText)
        print(type(self.jk_combo.currentText))

        if(self.j28a_combo.currentText()=='Y'):
            self.j28a_combo.currentText=2
        elif(self.j28a_combo.currentText()=='N'):
            self.j28a_combo.currentText=1
        
        if(self.j28c_combo.currentText()=='Y'):
            self.j28c_combo.currentText=2
        elif(self.j28c_combo.currentText()=='N'):
            self.j28c_combo.currentText=1

        # # psikologi
        # if(self.ps_combo.currentText()=='Psikologi'):
        #     self.ps_combo.currentText=0

        # # # fst
        # if(self.ps_combo.currentText()=='Informatika'):
        #     self.ps_combo.currentText=0
        # elif(self.ps_combo.currentText()=='Matematika'):
        #     self.ps_combo.currentText=1
        # elif(self.ps_combo.currentText()=='Teknik Elektro'):
        #     self.ps_combo.currentText=2
        # elif(self.ps_combo.currentText()=='Teknik Mesin'):
        #     self.ps_combo.currentText=3

        # ekonomi
        # if(self.ps_combo.currentText()=='Akuntansi'):
        #     self.ps_combo.currentText=0
        # elif(self.ps_combo.currentText()=='Ekonomi'):
        #     self.ps_combo.currentText=1
        # elif(self.ps_combo.currentText()=='Magister Manajemen'):
        #     self.ps_combo.currentText=2
        # elif(self.ps_combo.currentText()=='Manajemen'):
        #     self.ps_combo.currentText=3

        # FKIP
        # if(self.ps_combo.currentText()=='Bimbingan dan Konseling'):
        #     self.ps_combo.currentText=0
        # elif(self.ps_combo.currentText()=='Magister Pendidikan Bahasa Inggris'):
        #     self.ps_combo.currentText=1
        # elif(self.ps_combo.currentText()=='Pendidikan Bahasa Indonesia Program Magister'):
        #     self.ps_combo.currentText=2
        # elif(self.ps_combo.currentText()=='Pendidikan Bahasa Inggris'):
        #     self.ps_combo.currentText=3
        # elif(self.ps_combo.currentText()=='Pendidikan Bahasa dan Sastra Indonesia'):
        #     self.ps_combo.currentText=4
        # elif(self.ps_combo.currentText()=='Pendidikan Biologi'):
        #     self.ps_combo.currentText=5
        # elif(self.ps_combo.currentText()=='Pendidikan Ekonomi Bidang Keahlian Khusus Pendidik'):
        #     self.ps_combo.currentText=6
        # elif(self.ps_combo.currentText()=='Pendidikan Fisika'):
        #     self.ps_combo.currentText=7
        # elif(self.ps_combo.currentText()=='Pendidikan Guru Sekolah Dasar'):
        #     self.ps_combo.currentText=8
        # elif(self.ps_combo.currentText()=='Pendidikan Keagamaan Katolik'):
        #     self.ps_combo.currentText=9
        # elif(self.ps_combo.currentText()=='Pendidikan Kimia'):
        #     self.ps_combo.currentText=10
        # elif(self.ps_combo.currentText()=='Pendidikan Matematika'):
        #     self.ps_combo.currentText=11
        # elif(self.ps_combo.currentText()=='Pendidikan Matematika Program Magister'):
        #     self.ps_combo.currentText=12
        # elif(self.ps_combo.currentText()=='Pendidikan Profesi Guru Sekolah Dasar'):
        #     self.ps_combo.currentText=13
        # elif(self.ps_combo.currentText()=='Pendidikan Sejarah'):
        #     self.ps_combo.currentText=14

        # univ
        if(self.ps_combo.currentText()=='Akuntansi'):
            self.ps_combo.currentText=0
        elif(self.ps_combo.currentText()=='Bimbingan dan Konseling'):
            self.ps_combo.currentText=2
        elif(self.ps_combo.currentText()=='Doktor Kajian Budaya'):
            self.ps_combo.currentText=2
        elif(self.ps_combo.currentText()=='Ekonomi'):
            self.ps_combo.currentText=3
        elif(self.ps_combo.currentText()=='Farmasi'):
            self.ps_combo.currentText=4
        elif(self.ps_combo.currentText()=='Filsafat Keilahian Program Magister'):
            self.ps_combo.currentText=5
        elif(self.ps_combo.currentText()=='Filsafat Keilahian Program Sarjana'):
            self.ps_combo.currentText=6
        elif(self.ps_combo.currentText()=='Informatika'):
            self.ps_combo.currentText=7
        elif(self.ps_combo.currentText()=='Kajian Budaya Program Magister'):
            self.ps_combo.currentText=8
        elif(self.ps_combo.currentText()=='Magister Farmasi'):
            self.ps_combo.currentText=9
        elif(self.ps_combo.currentText()=='Magister Kajian Bahasa Inggris'):
            self.ps_combo.currentText=10
        elif(self.ps_combo.currentText()=='Magister Manajemen'):
            self.ps_combo.currentText=11
        elif(self.ps_combo.currentText()=='Magister Pendidikan Bahasa Inggris'):
            self.ps_combo.currentText=12
        elif(self.ps_combo.currentText()=='Manajemen'):
            self.ps_combo.currentText=13
        elif(self.ps_combo.currentText()=='Matematika'):
            self.ps_combo.currentText=14
        elif(self.ps_combo.currentText()=='Mekatronika'):
            self.ps_combo.currentText=15
        elif(self.ps_combo.currentText()=='Pendidikan Bahasa Indonesia Program Magister'):
            self.ps_combo.currentText=16
        elif(self.ps_combo.currentText()=='Pendidikan Bahasa Inggris'):
            self.ps_combo.currentText=17
        elif(self.ps_combo.currentText()=='Pendidikan Bahasa dan Sastra Indonesia'):
            self.ps_combo.currentText=18
        elif(self.ps_combo.currentText()=='Pendidikan Biologi'):
            self.ps_combo.currentText=19
        elif(self.ps_combo.currentText()=='Pendidikan Ekonomi Bidang Keahlian Khusus Pendidik'):
            self.ps_combo.currentText=20
        elif(self.ps_combo.currentText()=='Pendidikan Fisika'):
            self.ps_combo.currentText=21
        elif(self.ps_combo.currentText()=='Pendidikan Guru Sekolah Dasar'):
            self.ps_combo.currentText=22
        elif(self.ps_combo.currentText()=='Pendidikan Keagamaan Katolik'):
            self.ps_combo.currentText=23
        elif(self.ps_combo.currentText()=='Pendidikan Kimia'):
            self.ps_combo.currentText=24
        elif(self.ps_combo.currentText()=='Pendidikan Matematika'):
            self.ps_combo.currentText=25
        elif(self.ps_combo.currentText()=='Pendidikan Matematika Program Magister'):
            self.ps_combo.currentText=26
        elif(self.ps_combo.currentText()=='Pendidikan Profesi Apoteker'):
            self.ps_combo.currentText=27
        elif(self.ps_combo.currentText()=='Pendidikan Profesi Guru Sekolah Dasar'):
            self.ps_combo.currentText=28
        elif(self.ps_combo.currentText()=='Pendidikan Sejarah'):
            self.ps_combo.currentText=29
        elif(self.ps_combo.currentText()=='Psikologi'):
            self.ps_combo.currentText=30
        elif(self.ps_combo.currentText()=='Sastra Indonesia'):
            self.ps_combo.currentText=31
        elif(self.ps_combo.currentText()=='Sastra Inggris'):
            self.ps_combo.currentText=32
        elif(self.ps_combo.currentText()=='Sejarah'):
            self.ps_combo.currentText=33
        elif(self.ps_combo.currentText()=='Teknik Elektro'):
            self.ps_combo.currentText=34
        elif(self.ps_combo.currentText()=='Teknik Mesin'):
            self.ps_combo.currentText=35
        elif(self.ps_combo.currentText()=='Teknologi Elektromedis'):
            self.ps_combo.currentText=36
        elif(self.ps_combo.currentText()=='Teknologi Perancangan Mekanik'):
            self.ps_combo.currentText=37

        self.datamhs= [[self.jk_combo.currentText, self.ps_combo.currentText, self.sem_combo.currentText(), self.lokasi_combo.currentText(),
        self.j11_combo.currentText(),self.j21_combo.currentText(), self.j23_combo.currentText(), self.j25_combo.currentText(),
        self.j28a_combo.currentText, self.j28c_combo.currentText]]

        self.data = self.pickle_model.predict(self.datamhs)
        print(self.data)
        if(self.data=='A'):
            self.hasilprediksilabel.setText('A')
        elif(self.data=='B'):
            self.hasilprediksilabel.setText('B')
        elif(self.data=='C'):
            self.hasilprediksilabel.setText('C')
        elif(self.data=='D'):
            self.hasilprediksilabel.setText('D')

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "KLASIFIKASI KEBERHASILAN PEMBELAJARAN ONLINE \n"
" DENGAN ALGORITMA RANDOM FOREST DAN ADABOOST"))
        self.label_9.setText(_translate("MainWindow", "K-FOLD"))
        self.label_11.setText(_translate("MainWindow", "JUMLAH POHON"))
        self.proses_btn.setText(_translate("MainWindow", "PROSES"))
        self.label_7.setText(_translate("MainWindow", "AKURASI"))
        self.label_8.setText(_translate("MainWindow", "AKURASI"))
        self.simpanmodelada_btn.setText(_translate("MainWindow", "SIMPAN MODEL"))
        self.label_4.setText(_translate("MainWindow", "Info Data"))
        self.inputdata_btn.setText(_translate("MainWindow", "INPUT DATA"))
        self.simpanmodelrf_btn.setText(_translate("MainWindow", "SIMPAN MODEL"))
        self.label_6.setText(_translate("MainWindow", "ADABOOST"))
        self.label_5.setText(_translate("MainWindow", "RANDOM FOREST"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.dm_tab), _translate("MainWindow", "Data Mining"))
        self.prediksi_btn.setText(_translate("MainWindow", "Prediksi"))
        self.label_69.setText(_translate("MainWindow", "Jenis Kelamin"))
        self.label_70.setText(_translate("MainWindow", "Program Studi"))
        self.label_71.setText(_translate("MainWindow", "Semester"))
        self.label_72.setText(_translate("MainWindow", "Lokasi"))
        self.label_82.setText(_translate("MainWindow", "J11"))
        self.jk_combo.setItemText(0, _translate("MainWindow", "Perempuan"))
        self.jk_combo.setItemText(1, _translate("MainWindow", "Laki-laki"))
        self.ps_combo.setItemText(0, _translate("MainWindow", "Akuntansi"))
        self.ps_combo.setItemText(1, _translate("MainWindow", "Bimbingan Konseling"))
        self.ps_combo.setItemText(2, _translate("MainWindow", "Doctor Kajian Budaya"))
        self.ps_combo.setItemText(3, _translate("MainWindow", "EC"))
        self.ps_combo.setItemText(4, _translate("MainWindow", "Ekonomi"))
        self.ps_combo.setItemText(5, _translate("MainWindow", "Farmasi"))
        self.ps_combo.setItemText(6, _translate("MainWindow", "Filsafat Keilahian Program Magister"))
        self.ps_combo.setItemText(7, _translate("MainWindow", "Filsafat Keilahian Program Sarjana"))
        self.ps_combo.setItemText(8, _translate("MainWindow", "Informatika"))
        self.ps_combo.setItemText(9, _translate("MainWindow", "Kajian Budaya Program Magister"))
        self.ps_combo.setItemText(10, _translate("MainWindow", "Magister Farmasi"))
        self.ps_combo.setItemText(11, _translate("MainWindow", "Magister Kajian Bahasa Inggris"))
        self.ps_combo.setItemText(12, _translate("MainWindow", "Magister Manajemen"))
        self.ps_combo.setItemText(13, _translate("MainWindow", "Magister Pendidikan Bahasa Inggris"))
        self.ps_combo.setItemText(14, _translate("MainWindow", "Manajemen"))
        self.ps_combo.setItemText(15, _translate("MainWindow", "Matematika"))
        self.ps_combo.setItemText(16, _translate("MainWindow", "Mekatronika"))
        self.ps_combo.setItemText(17, _translate("MainWindow", "Pendidikan Bahasa dan Sastra Indonesia"))
        self.ps_combo.setItemText(18, _translate("MainWindow", "Pendidikan Bahasa Indonesia Program Magister"))
        self.ps_combo.setItemText(19, _translate("MainWindow", "Pendidikan Bahasa Inggris"))
        self.ps_combo.setItemText(20, _translate("MainWindow", "Pendidikan Biologi"))
        self.ps_combo.setItemText(21, _translate("MainWindow", "Pendidikan Ekonomi Bidang Keahlian Khusus Pendidik"))
        self.ps_combo.setItemText(22, _translate("MainWindow", "Pendidikan Fisika"))
        self.ps_combo.setItemText(23, _translate("MainWindow", "Pendidikan Guru Sekolah Dasar"))
        self.ps_combo.setItemText(24, _translate("MainWindow", "Pendidikan Keagamaan Katolik"))
        self.ps_combo.setItemText(25, _translate("MainWindow", "Pendidikan Kimia"))
        self.ps_combo.setItemText(26, _translate("MainWindow", "Pendidikan Matematika Program Magister"))
        self.ps_combo.setItemText(27, _translate("MainWindow", "Pendidikan Matematika"))
        self.ps_combo.setItemText(28, _translate("MainWindow", "Pendidikan Profesi Apoteker"))
        self.ps_combo.setItemText(29, _translate("MainWindow", "Pendidikan Profesi Guru Sekolah Dasar"))
        self.ps_combo.setItemText(30, _translate("MainWindow", "Pendidikan Sejarah"))
        self.ps_combo.setItemText(31, _translate("MainWindow", "Psikologi"))
        self.ps_combo.setItemText(32, _translate("MainWindow", "Sastra Indonesia"))
        self.ps_combo.setItemText(33, _translate("MainWindow", "Sastra Inggris"))
        self.ps_combo.setItemText(34, _translate("MainWindow", "Sejarah"))
        self.ps_combo.setItemText(35, _translate("MainWindow", "Teknik Elektro"))
        self.ps_combo.setItemText(36, _translate("MainWindow", "Teknik Mesin"))
        self.ps_combo.setItemText(37, _translate("MainWindow", "Teknologi Elektromedis"))
        self.ps_combo.setItemText(38, _translate("MainWindow", "Teknologi Perancangan Mekanik"))
        self.sem_combo.setItemText(0, _translate("MainWindow", "2"))
        self.sem_combo.setItemText(1, _translate("MainWindow", "4"))
        self.sem_combo.setItemText(2, _translate("MainWindow", "6"))
        self.sem_combo.setItemText(3, _translate("MainWindow", "8"))
        self.sem_combo.setItemText(4, _translate("MainWindow", "10"))
        self.sem_combo.setItemText(5, _translate("MainWindow", "12"))
        self.lokasi_combo.setItemText(0, _translate("MainWindow", "1"))
        self.lokasi_combo.setItemText(1, _translate("MainWindow", "2"))
        self.lokasi_combo.setItemText(2, _translate("MainWindow", "3"))
        self.j11_combo.setItemText(0, _translate("MainWindow", "1"))
        self.j11_combo.setItemText(1, _translate("MainWindow", "2"))
        self.j11_combo.setItemText(2, _translate("MainWindow", "3"))
        self.j11_combo.setItemText(3, _translate("MainWindow", "4"))
        self.label_22.setText(_translate("MainWindow", "J28a"))
        self.label_59.setText(_translate("MainWindow", "J28c"))
        self.j28a_combo.setItemText(0, _translate("MainWindow", "Y"))
        self.j28a_combo.setItemText(1, _translate("MainWindow", "N"))
        self.j28c_combo.setItemText(0, _translate("MainWindow", "Y"))
        self.j28c_combo.setItemText(1, _translate("MainWindow", "N"))
        self.label_89.setText(_translate("MainWindow", "J21"))
        self.label_91.setText(_translate("MainWindow", "J23"))
        self.label_93.setText(_translate("MainWindow", "J25"))
        self.j21_combo.setItemText(0, _translate("MainWindow", "1"))
        self.j21_combo.setItemText(1, _translate("MainWindow", "2"))
        self.j21_combo.setItemText(2, _translate("MainWindow", "3"))
        self.j21_combo.setItemText(3, _translate("MainWindow", "4"))
        self.j23_combo.setItemText(0, _translate("MainWindow", "1"))
        self.j23_combo.setItemText(1, _translate("MainWindow", "2"))
        self.j23_combo.setItemText(2, _translate("MainWindow", "3"))
        self.j23_combo.setItemText(3, _translate("MainWindow", "4"))
        self.j25_combo.setItemText(0, _translate("MainWindow", "1"))
        self.j25_combo.setItemText(1, _translate("MainWindow", "2"))
        self.j25_combo.setItemText(2, _translate("MainWindow", "3"))
        self.j25_combo.setItemText(3, _translate("MainWindow", "4"))
        self.label_68.setText(_translate("MainWindow", "HASIL PREDIKSI IPS"))
        self.inputmodel_btn.setText(_translate("MainWindow", "INPUT MODEL"))
        self.label_96.setText(_translate("MainWindow", "PERTANYAAN"))
        self.plainTextEdit.setPlainText(_translate("MainWindow", "J3: Saya tetap bersemangat mengikuti kuliah dan tekun mengerjakan tugas dari dosen meskipun secara daring.\n"
"\n"
"J6 : Saya menyediakan waktu belajar mandiri di luar jadual kuliah daring.\n"
"\n"
"J8 : Saya merasa akan semakin bersemangat bila dapat berinteraksi fisik dengan dosen dan teman kuliah.\n"
"\n"
"J9 : LMS untuk matakuliah yang saya ikuti dilengkapi dengan tujuan pembelajaran, materi pembelajaran, dan instruksi beserta aktivitas pembelajaran yang jelas.\n"
"\n"
"J11 : Materi pembelajaran yang disajikan dalam LMS yang saya ikuti bervariasi jenisnya (teks, ppt, video, dll).\n"
"\n"
"J12 : Materi pembelajaran yang disajikan dalam LMS memudahkan saya untuk belajar secara mandiri.\n"
"\n"
"J17 : Kuiz, ujian, dan tugas yang diberikan dosen dalam takaran yang cukup dan relevan serta membantu saya belajar dengan baik.\n"
"\n"
"J18 : Nilai yang saya peroleh dari  UTS, Kuiz, UAS, atau tugas lain sesuai dengan usaha yang saya lakukan.\n"
"\n"
"J21 : Kuliah daring membuat saya lebih antusias/ bersemangat dalam belajar.\n"
"\n"
"J23 : Saya tidak menemui kendala yang berarti ketika harus berdiskusi atau bekerja kelompok dengan teman.\n"
"\n"
"J24 : Saya tidak memiliki kendala yang berarti dalam mengoperasikan LMS untuk mengikuti dan menyelesaikan tugas-tugas perkuliahan.\n"
"\n"
"J25 : Selama pembelajaran daring saya dapat mengakses buku referensi dengan mudah.\n"
"\n"
"J27 : Universitas memberikan pelatihan yang memadai kepada saya supaya dapat mengoptimalkan LMS yang disediakan.\n"
"\n"
"J28 : Sesuai keberdayaan finansial dan akses internet, fasilitas terbaik untuk kelas daring. \n"
"a) Learning Management System Kampus\n"
"b) Aplikasi (Zoom, Google Meet dan sebagainya)\n"
"c) Rekaman Dosen mengajar di YouTube\n"
"d) WhatsApp \n"
"\n"
"J29 : Sesuai keberdayaan finansial dan akses internet, penyelenggaraan pembelajaran selama masa pandemi hendaknya berlangsung.\n"
"a) secara daring penuh\n"
"b) separuh daring dan separuh luring\n"
"\n"
"J31 : Akses internet di rumah.\n"
"a) berlangganan internet di rumah\n"
"b) membeli paket kuota\n"
"\n"
"J32 : Keberdayaan internet untuk mengakses kelas daring dengan aplikasi (Zoom, Google Meet, dsb).\n"
"a) lancar\n"
"b) putus-putus"))
        self.label_105.setText(_translate("MainWindow", "Keterangan"))
        self.plainTextEdit_3.setPlainText(_translate("MainWindow", "Lokasi: \n"
"1 = Desa/Kecamatan\n"
"2 = Kota/Kabupaten\n"
"3 = Kota Besar\n"
"\n"
"Jawaban: \n"
"1 = Sangat Tidak Setuju\n"
"2 = Tidak Setuju\n"
"3 = Setuju\n"
"4 = Sangat Setuju\n"
"Y = Yes\n"
"N = No\n"
""))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.uji_tab), _translate("MainWindow", "Uji Data Tunggal"))
import Gambar_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
